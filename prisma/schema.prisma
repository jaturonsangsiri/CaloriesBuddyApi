// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Foods type
enum FoodCategory {
  PROTEINS
  CARBOHYDRATES
  MINERALS
  VITAMINS
  FATS
}

// Food
model Foods {
  id           String       @id @default(cuid())
  name         String       @unique
  calories     Float
  carb         Float
  protein      Float
  fat          Float
  description  String?      @default("")
  foodCategory FoodCategory
  image        String?      @default("")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  updatedBy    String

  foodFav UserFavFoods[]
  mealItem MealItem[]
}

enum Gender {
  MALE
  FEMALE
}

// Activity Level Type
enum activityLevel {
  LITTLE
  MEDIUM
  ALOT
}

// Exercise goals
enum ExerciseGoal {
  LOSE_WEIGHT
  GAIN_WEIGHT
  MAINTAIN
}

// users
model Users {
  id            String        @id @default(cuid())
  name          String        @unique
  accName       String        @unique
  password      String
  email         String
  gender        Gender
  age           Int
  height        Int
  weight        Int
  profileImg    String        @default("")
  activityLevel activityLevel @default(MEDIUM)
  goal          ExerciseGoal  @default(LOSE_WEIGHT)
  tdee          Int           @default(0)
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())

  meal          Meal[]
  foodFav       UserFavFoods[]
  notifications Notification[]
  workout       Activities[]
  favWorkout    FavWorkout[]
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACKS
  LATE_NIGHT
}

// Foods Eaten
model Meal {
  id        String   @unique @default(cuid())
  type      MealType
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId String
  user   Users  @relation(fields: [userId], references: [id])
  mealItems MealItem[]
}

// Meal Items
model MealItem {
  id        String   @unique @default(cuid())
  quantity  Int      @default(0)
  note      String?  @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  mealId    String
  meal      Meal     @relation(fields: [mealId], references: [id])
  foodId    String
  food      Foods    @relation(fields: [foodId], references: [id])
}

// Favorite food list
model UserFavFoods {
  id        String   @unique @default(cuid())
  userId    String
  user      Users    @relation(fields: [userId], references: [id])
  foodId    String
  food      Foods    @relation(fields: [foodId], references: [id])
  createdAt DateTime @default(now())
}

enum NotificationType {
  REGULAR // สีเขียว หรือแยกสีย่อยเข้าไปอีก เพิ่มรายการอาหารสำเร็จ, มีกิจกรรมใหม่
  WARNINGS // สีเหลือง ชื่อของท่านไม่เหมาะสม กรุณาเปลี่ยนชื่อ
  ALERTS // สีแดง กรุณายืนยันตัวตนเพื่อสมัครสมาชิกต่อไป
}

model Notification {
  id        String           @unique @default(cuid())
  userId    String
  user      Users            @relation(fields: [userId], references: [id])
  message   String
  type      NotificationType
  createdAt DateTime         @default(now())
}

// Muscle Type
enum MuscleType {
  CHEST
  SHOULDER
  LEG
  TRICEP
  BICEP
  FOREARM
  BACK
  CALF
}

// Workout Difficulty
enum WorkoutDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum WorkoutEquipment {
  DUMBBELL
  BARBELL
  INCLINE_BENCH
}

model Workout {
  id          String            @unique @default(cuid())
  name        String            @unique
  detail      String
  muscle      MuscleType
  calorieBurn Int
  difficulty  WorkoutDifficulty @default(BEGINNER)
  image       String
  video       String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now())

  activities Activities[]
  favWorkout FavWorkout[]
}

// User Favorite Workout
model FavWorkout {
  id        String   @unique @default(cuid())
  userId    String
  user      Users    @relation(fields: [userId], references: [id])
  workoutId String
  workout   Workout  @relation(fields: [workoutId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// User Activitys
model Activities {
  id        String   @unique @default(cuid())
  userId    String
  user      Users    @relation(fields: [userId], references: [id])
  workoutId String
  workout   Workout  @relation(fields: [workoutId], references: [id])
  sets      Int
  reps      Int
  weight    Int
  duration  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
